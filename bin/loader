#!/bin/bash
#
# COPYRIGHT NOTICE
# Copyright 1986-2016 Xilinx, Inc. All Rights Reserved.
#


#
# Check if DIR contains valid executables for PLAT
#
# Usage:
#  if IS_VALID_TOOL() DIR PLAT; then
#
#  dir   - Directory to test
#  plat  - lin or lin64
#  valid - Will be set to True if the following directories exist:
#                   $XILINX/bin/PLAT
#                   $XILINX/lib/PLAT
#                   $XILINX/xilinx
#
# WARNING: The variables _dir, _plat, and _valid cannot be used elsewhere
#          in loader
IS_VALID_TOOL() {
  _dir=$1
  _plat=$2
  _valid=0
  for d in lib/$_plat bin/$_plat; do
    if [ ! -d "$_dir/$d" ]; then
      _valid=1
    fi
  done
  return $_valid
}

if [ "$XIL_NO_OVERRIDE" = "1" ]; then
  XIL_PA_NO_XILINX_OVERRIDE=1
  XIL_PA_NO_XILINX_SDK_OVERRIDE=1
  XIL_PA_NO_XILINX_PATH_OVERRIDE=1
  export XIL_PA_NO_XILINX_OVERRIDE
  export XIL_PA_NO_XILINX_SDK_OVERRIDE XIL_PA_NO_XILINX_PATH_OVERRIDE
fi

if [ -z "$_RDI_SETENV_RUN" ]; then
  . "`dirname \"$0\"`/setupEnv.sh"
fi
if [ ! -z "$_RDI_SETENV_RUN" ]; then
  unset _RDI_SETENV_RUN
fi

if [[ "`uname`" == CYGWIN* ]]; then
  trap "" INT
  "$RDI_BINROOT/loader.bat" "$@"
  exit $?
fi

if [[ "`uname`" == MINGW*NT* ]]; then
  trap "" INT
  cmd //c "$RDI_BINROOT/loader.bat" "$@"
  exit $?
fi
#add msys64
if [[ "`uname`" == MSYS*NT* ]]; then
  trap "" INT
  "$RDI_BINROOT/loader.bat" "$@"
  exit $?
fi

case `uname -m` in
  x86_64)
    ;;
  *)
    echo 1>&2 "Unsupported architecture: `uname -m`"
    exit 1
    ;;
esac

#
# If True check for the existence of RDI_PROG prior to invoking the
# Function RDI_EXEC_COMMANDS
#
RDI_CHECK_PROG=True

case "$XILINX" in
  *:*)
    if [ "$XIL_SUPPRESS_OVERRIDE_WARNINGS" != "1" ]; then
      echo "WARNING: \$XILINX contains multiple entries. Setting"
      echo "         \$XIL_PA_NO_XILINX_OVERRIDE to 1."
      echo
    fi
    XIL_PA_NO_XILINX_OVERRIDE=1
    ;;
esac

case "$XILINX_SDK" in
  *:*)
    if [ "$XIL_SUPPRESS_OVERRIDE_WARNINGS" != "1" ]; then
      echo "WARNING: \$XILINX_SDK contains multiple entries. Setting"
      echo "         \$XIL_PA_NO_XILINX_SDK_OVERRIDE to 1."
      echo
    fi
    XIL_PA_NO_XILINX_SDK_OVERRIDE=1
    ;;
esac

if [ "$XIL_SUPPRESS_OVERRIDE_WARNINGS" != "1" ]; then
  if [ "$XIL_PA_NO_XILINX_OVERRIDE" = "1" ]; then
    echo "WARNING: \$XIL_PA_NO_XILINX_OVERRIDE is set to 1."
    echo "         When \$XIL_PA_NO_XILINX_OVERRIDE is enabled"
    echo "         \$XILINX, \$MYXILINX, \$PATH, and \$LD_LIBRARY_PATH must"
    echo "         be manually set."
  fi

  if [ "$XIL_PA_NO_XILINX_SDK_OVERRIDE" = "1" ]; then
    echo "WARNING: \$XIL_PA_NO_XILINX_SDK_OVERRIDE is set to 1."
    echo "         When \$XIL_PA_NO_XILINX_SDK_OVERRIDE is enabled"
    echo "         \$XILINX_SDK, \$PATH must be manually set."
  fi
fi

#
# Handle options. If this is a release build rdiArgs.sh will
# be mostly empty.
#
. "$RDI_BINROOT/rdiArgs.sh" "$@"


#
# Enforce java execution if RDI_JAVALAUNCH is defined
#
if [ ! -z "$RDI_JAVALAUNCH" ]; then
  RDI_CHECK_PROG=False
  RDI_EXEC_COMMANDS() {
    RDI_JAVA_COMMANDS "$@"
  }
fi

_RDI_DONT_SET_XILINX_AS_LD_LIB_PATH=1
#
# Populate PATH and LD_LIBRARY_PATH with XILINX libraries and executables
# unless _RDI_DONT_SET_XILINX_AS_LD_LIB_PATH is set, then only populate PATH
#

if [ "$XIL_PA_NO_XILINX_OVERRIDE" != "1" ]; then
  if [ ! -z "$XILINX" ]; then
    if IS_VALID_TOOL "$XILINX" lin64; then
      RDI_ISE_PLATFORM=lin64
      _RDI_SET_XILINX_PATH=1
    else
      if IS_VALID_TOOL "$XILINX" lin; then
        echo "ERROR: \$XILINX does not contain 64bit executables."
        exit 1
      fi
    fi
    if [ ! -z "$_RDI_SET_XILINX_PATH" ]; then
      if [ ! -z "$_RDI_DONT_SET_XILINX_AS_PATH" ]; then
#        if we don't want XILINX as PATH don't set LD_LIBRARY_PATH either
#        but honor user MYXILINX settings.
        if [ ! -z "$MYXILINX" ]; then
          RDI_PREPEND_PATH=$MYXILINX/bin/$RDI_ISE_PLATFORM
          RDI_PREPEND_LD_LIBRARY_PATH=$MYXILINX/lib/$RDI_ISE_PLATFORM
        fi
      else
#        set XILINX AS PATH, but we may not want LD_LIBRARY_PATH set.
        if [ ! -z "$MYXILINX" ]; then
          RDI_PREPEND_PATH=$MYXILINX/bin/$RDI_ISE_PLATFORM:$XILINX/bin/$RDI_ISE_PLATFORM
          if [ -z "$_RDI_DONT_SET_XILINX_AS_LD_LIB_PATH" ]; then
            RDI_PREPEND_LD_LIBRARY_PATH=$MYXILINX/lib/$RDI_ISE_PLATFORM:$XILINX/lib/$RDI_ISE_PLATFORM
          fi
        else
          RDI_PREPEND_PATH=$XILINX/bin/$RDI_ISE_PLATFORM
          if [ -z "$_RDI_DONT_SET_XILINX_AS_LD_LIB_PATH" ]; then
            RDI_PREPEND_LD_LIBRARY_PATH=$XILINX/lib/$RDI_ISE_PLATFORM
          fi
        fi
      fi
      unset _RDI_DONT_SET_XILINX_AS_PATH
      export RDI_PREPEND_PATH RDI_PREPEND_LD_LIBRARY_PATH
    fi
  fi
fi
unset _RDI_DONT_SET_XILINX_AS_LD_LIB_PATH

#
# Populate PATH with XILINX_SDK executables
#
if [ "$XIL_PA_NO_XILINX_SDK_OVERRIDE" != "1" ]; then
  if [ ! -z "$XILINX_SDK" ]; then
    _valid=1
    for d in lib/lin64 bin/lin64; do
      if [ ! -d "$XILINX_SDK/$d" ]; then
        _valid=0
      fi
    done
    if [ "$_valid" == "1" ]; then
      RDI_SDK_PLATFORM=lin64
    fi
    if [ ! -z "$RDI_SDK_PLATFORM" ]; then
      if [ ! -z "$RDI_PREPEND_PATH" ]; then
        RDI_PREPEND_PATH=$XILINX_SDK/bin/$RDI_SDK_PLATFORM:$RDI_PREPEND_PATH
      else
        RDI_PREPEND_PATH=$XILINX_SDK/bin/$RDI_SDK_PLATFORM
      fi
      export RDI_PREPEND_PATH
    fi
    if [ ! -z "$RDI_PREPEND_PATH" ]; then
      RDI_PREPEND_PATH=$XILINX_SDK/bin:$RDI_PREPEND_PATH
    else
      RDI_PREPEND_PATH=$XILINX_SDK/bin
    fi
    export RDI_PREPEND_PATH
  fi
fi

if [ ! -z "$XILINX_COMMON_TOOLS" ]; then
  if [ ! -z "$RDI_ISE_PLATFORM" ]; then
    if IS_VALID_TOOL "$XILINX_COMMON_TOOLS" $RDI_ISE_PLATFORM; then
      if [ ! -z "$RDI_PREPEND_PATH" ]; then
        RDI_PREPEND_PATH=$RDI_PREPEND_PATH:$XILINX_COMMON_TOOLS/bin/$RDI_ISE_PLATFORM
      else
        RDI_PREPEND_PATH=$XILINX_COMMON_TOOLS/bin/$RDI_ISE_PLATFORM
      fi
      if [ ! -z "$RDI_PREPEND_LD_LIBRARY_PATH" ]; then
        RDI_PREPEND_LD_LIBRARY_PATH=$RDI_PREPEND_LD_LIBRARY_PATH:$XILINX_COMMON_TOOLS/lib/$RDI_ISE_PLATFORM
      else
        RDI_PREPEND_LD_LIBRARY_PATH=$XILINX_COMMON_TOOLS/lib/$RDI_ISE_PLATFORM
      fi
      export RDI_PREPEND_PATH RDI_PREPEND_LD_LIBRARY_PATH
    fi
  fi
fi

XILINX_DSP=$XILINX
XILINX_PLANAHEAD="$RDI_APPROOT"
export XILINX_DSP XILINX_PLANAHEAD

if [ ! -d "$RDI_JAVAROOT" -a -z "$RDI_NO_JRE" ]; then
  echo "WARNING: $RDI_JAVAROOT does not exist."
fi

if [ ! -z "$RDI_NO_JRE" ]; then
  unset RDI_NO_JRE
fi


if [ "$RDI_INVOKE_PROD_VERSION" = 1 ]; then
  RDI_CHECK_PROG=False
fi
if [ -z "$RDI_PROG" -a "$RDI_CHECK_PROG" = "True" ]; then
  echo "ERROR: No executable to launch. The -exec option *must* be used"
  echo "       when invoking the loader."
  echo "       Example:"
  echo "         $0 -exec EXECUTABLE"
  echo "         Where: EXECUTABLE is the name of binary in bin/unwrapped/PLAT.{o,d}"
  exit 1
fi

RDI_PROGNAME="$RDI_PROG"
RDI_PROG="$RDI_APPROOT/bin/unwrapped/$RDI_PLATFORM$RDI_OPT_EXT/$RDI_PROGNAME"
PRODVERSION_EXE="$RDI_APPROOT/bin/unwrapped/$RDI_PLATFORM$RDI_OPT_EXT/prodversion"
#Locate RDI_PROG in patch areas.
IFS=$':'
for SUB_PATCH in $RDI_PATCHROOT; do
    if [ -f "$SUB_PATCH/bin/unwrapped/$RDI_PLATFORM$RDI_OPT_EXT/$RDI_PROGNAME" ]; then
        RDI_PROG="$SUB_PATCH/bin/unwrapped/$RDI_PLATFORM$RDI_OPT_EXT/$RDI_PROGNAME"
    fi
    if [ -f "$SUB_PATCH/bin/unwrapped/$RDI_PLATFORM$RDI_OPT_EXT/prodversion" ]; then
        PRODVERSION_EXE="$SUB_PATCH/bin/unwrapped/$RDI_PLATFORM$RDI_OPT_EXT/prodversion"
    fi
done
IFS=$' \t\n'
export RDI_PROG

#Add patch lib areas before %RDI_APPROOT%/lib
RDI_LIBDIR="$($RDI_BINROOT/ldlibpath.sh $RDI_APPROOT/lib/$RDI_PLATFORM$RDI_OPT_EXT)"
IFS=$':'
for SUB_PATCH in $RDI_PATCHROOT; do
    if [ -d "$SUB_PATCH/lib/$RDI_PLATFORM$RDI_OPT_EXT" ]; then
        RDI_LIBDIR="$($RDI_BINROOT/ldlibpath.sh $SUB_PATCH/lib/$RDI_PLATFORM$RDI_OPT_EXT):$RDI_LIBDIR"
    fi
done
IFS=$' \t\n'
export RDI_LIBDIR

#Add patch bin areas before %RDI_APPROOT%/bin
RDI_BINDIR="$RDI_APPROOT/bin"
IFS=$':'
for SUB_PATCH in $RDI_PATCHROOT; do
    if [ -d "$SUB_PATCH/bin" ]; then
        RDI_BINDIR="$SUB_PATCH/bin:$RDI_BINDIR"
    fi
done
IFS=$' \t\n'

# Set TCL_LIBRARY so that planAhead can find init.tcl at startup
TCL_LIBRARY="$RDI_APPROOT/tps/tcl/tcl8.5"
export TCL_LIBRARY

# Set ISL path
ISL_IOSTREAMS_RSA="$RDI_APPROOT/tps/isl"
export ISL_IOSTREAMS_RSA

# Control what shared objects planAhead.java loads.  This variable
# allows to conditional loading depending for rmake builds vs hmake
# builds.
RDI_BUILD=yes
export RDI_BUILD

# Add dot lib for Yongjiek temporarily.
if [ -z "$LD_LIBRARY_PATH" ]; then
    LD_LIBRARY_PATH=$RDI_BINROOT/../lnx64/tools/dot/lib
else
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RDI_BINROOT/../lnx64/tools/dot/lib
fi


# Set the library load path
if [ -z "$LD_LIBRARY_PATH" ]; then
  # This variable is used to restore the LD_LIBRARY_PATH when executables are invoked from planAhead.
  if [ ! -z "$RDI_PREPEND_LD_LIBRARY_PATH" ]; then
    HDIPRELDPATH=$RDI_PREPEND_LD_LIBRARY_PATH
  fi
  if [ -d "$RDI_JAVAROOT" ]; then
    LD_LIBRARY_PATH=$RDI_LIBDIR:$RDI_JAVAROOT/lib/$RDI_JAVA_PLATFORM:$RDI_JAVAROOT/lib/$RDI_JAVA_PLATFORM/server
  else
    LD_LIBRARY_PATH=$RDI_LIBDIR
  fi
  if [[ -n "$RDI_JAVAFXROOT" ]] && [[ -d "$RDI_JAVAFXROOT" ]]; then
    LD_LIBRARY_PATH=$RDI_JAVAFXROOT/lib:$LD_LIBRARY_PATH
  fi
  if [[ -n "$RDI_JAVACEFROOT" ]] && [[ -d "$RDI_JAVACEFROOT" ]]; then
    LD_LIBRARY_PATH=$RDI_JAVACEFROOT/bin/lib/linux64:$LD_LIBRARY_PATH
  fi
else
  # This variable is used to restore the LD_LIBRARY_PATH when executables are invoked from planAhead.
  if [ ! -z "$RDI_PREPEND_LD_LIBRARY_PATH" ]; then
    HDIPRELDPATH=$RDI_PREPEND_LD_LIBRARY_PATH:$LD_LIBRARY_PATH
  else
    HDIPRELDPATH=$LD_LIBRARY_PATH
  fi
  if [ -d "$RDI_JAVAROOT" ]; then
    LD_LIBRARY_PATH=$RDI_LIBDIR:$RDI_JAVAROOT/lib/$RDI_JAVA_PLATFORM:$RDI_JAVAROOT/lib/$RDI_JAVA_PLATFORM/server:$LD_LIBRARY_PATH
  else
    LD_LIBRARY_PATH=$RDI_LIBDIR:$LD_LIBRARY_PATH
  fi
  if [[ -n "$RDI_JAVAFXROOT" ]] && [[ -d "$RDI_JAVAFXROOT" ]]; then
    LD_LIBRARY_PATH=$RDI_JAVAFXROOT/lib:$LD_LIBRARY_PATH
  fi
  if [[ -n "$RDI_JAVACEFROOT" ]] && [[ -d "$RDI_JAVACEFROOT" ]]; then
    LD_LIBRARY_PATH=$RDI_JAVACEFROOT/bin/lib/linux64:$LD_LIBRARY_PATH
  fi
fi
export LD_LIBRARY_PATH HDIPRELDPATH

# Add planAhead binary location to path.
if [ ! -z "$RDI_PREPEND_PATH" ]; then
  if [ -z "$PATH" ]; then
    PATH=$RDI_PREPEND_PATH
  else
    PATH=$RDI_PREPEND_PATH:$PATH
  fi
fi
if [ -z "$PATH" ]; then
  PATH=$RDI_BINDIR
  if [ -d "$RDI_JAVAROOT" ]; then
    PATH=$PATH:$RDI_JAVAROOT/bin
  fi
else
  if [ -d "$RDI_JAVAROOT" ]; then
    PATH=$RDI_JAVAROOT/bin:$PATH
  fi
  PATH=$RDI_BINDIR:$PATH
fi
# CR-1006623 Vivado bootloader enhancements to support gnu path
if [ -d "$XILINX_VIVADO/gnu/microblaze/lin/bin" ]; then
    PATH=$XILINX_VIVADO/gnu/microblaze/lin/bin:$PATH
fi
export PATH

if [ "$_RDI_NEEDS_PYTHON" = "True" ]; then
  RDI_SETPYTHON=True
  unset _RDI_NEEDS_PYTHON
  # CR 1021764 add python path setup to loaders.
  RDI_PYTHON3_VERSION=3.8.3
  RDI_PYTHON3=$RDI_APPROOT/tps/$RDI_PLATFORM/python-$RDI_PYTHON3_VERSION
  if [ `basename $RDI_APPROOT` == "aietools" ]; then
    if [ -z "$XILINX_VITIS" ]; then
      echo WARNING: XILINX_VITIS environment variable unset, python unavailable
      RDI_SETPYTHON=False
    fi
    RDI_PYTHON3=$XILINX_VITIS/tps/$RDI_PLATFORM/python-$RDI_PYTHON3_VERSION
  fi
  if [ "$RDI_SETPYTHON" == "True" ]; then
    RDI_PYTHONHOME=$RDI_PYTHON3
    RDI_PYTHONPATH=$RDI_PYTHONHOME:$RDI_PYTHONHOME/bin:$RDI_PYTHONHOME/lib:$RDI_PYTHONHOME/lib/python3.8/site-packages
    RDI_PYTHON_LD_LIBPATH=$RDI_PYTHONHOME/lib

    if [ -d $RDI_PYTHON3 ]; then
      PYTHON=$RDI_PYTHON3
      PYTHONHOME=$RDI_PYTHONHOME
      PYTHONPATH=$RDI_PYTHONPATH:$PYTHONPATH
      LD_LIBRARY_PATH=$RDI_PYTHON_LD_LIBPATH:$LD_LIBRARY_PATH
      PATH=$PYTHONPATH:$PATH
      export PYTHON PYTHONHOME PYTHONPATH LD_LIBRARY_PATH PATH
    fi
  fi
fi
unset RDI_SETPYTHON

# set up RT_LIBPATH
RT_LIBPATH=$RDI_APPROOT/scripts/rt/data
IFS=$':'
for SUB_PATCH in $RDI_PATCHROOT; do
    if [ -d "$SUB_PATCH/scripts/rt/data" ]; then
        RT_LIBPATH="$SUB_PATCH/scripts/rt/data"
        break
    fi
done
IFS=$' \t\n'
export RT_LIBPATH

RT_TCL_PATH=$RDI_APPROOT/scripts/rt/base_tcl/tcl
IFS=$':'
for SUB_PATCH in $RDI_PATCHROOT; do
    if [ -d "$SUB_PATCH/scripts/rt/base_tcl/tcl" ]; then
        RT_TCL_PATH="$SUB_PATCH/scripts/rt/base_tcl/tcl"
        break
    fi
done
IFS=$' \t\n'
export RT_TCL_PATH

SYNTH_COMMON=$RT_LIBPATH
export SYNTH_COMMON

TMP_XILINX_PATH=""
# set RDI_APPROOT to be a multipath at this point
IFS=$':'
for SUB_PATCH in $RDI_PATCHROOT; do
    if [ -d "$SUB_PATCH" ]; then
        RDI_APPROOT="$SUB_PATCH:$RDI_APPROOT"
        TMP_XILINX_PATH="$SUB_PATCH:$TMP_XILINX_PATH"
    fi
done
IFS=$' \t\n'
export RDI_APPROOT

# Dedupe the PATH
IFS=$':'
_NEWPATH=''
for _OLDENTRY in $PATH; do
    _FOUND=0
    _TMPENTRY=${_OLDENTRY%/}
    for _NEWENTRY in $_NEWPATH; do
        _NEWENTRY=${_NEWENTRY%/}
        if [ "$_TMPENTRY" == "$_NEWENTRY" ]; then
            _FOUND=1
        fi
    done
    if [ "$_FOUND" == "0" ]; then
        if [ -z "$_NEWPATH" ]; then
            _NEWPATH=$_OLDENTRY
        else
            _NEWPATH=$_NEWPATH:$_OLDENTRY
        fi
    fi
done
IFS=$' \t\n'
PATH=$_NEWPATH
export PATH

if [ "$RDI_VERBOSE" = "True" ]; then
  echo "     **** ENVIRONMENT DEBUG INFO ****"
  echo " XILINX_COMMON_TOOLS: \"$XILINX_COMMON_TOOLS\""
  echo "              XILINX: \"$XILINX\""
  if [ -n "$XILINX_HLS" ]; then
    echo "          XILINX_HLS: \"$XILINX_HLS\""
  fi
  if [ -n "$XILINX_VIVADO" ]; then
    echo "       XILINX_VIVADO: \"$XILINX_VIVADO\""
  fi
  echo "          XILINX_SDK: \"$XILINX_SDK\""
  echo "         XILINX_PATH: \"$TMP_XILINX_PATH\""
  echo "         RDI_APPROOT: \"$RDI_APPROOT\""
  echo "         HDI_APPROOT: \"$HDI_APPROOT\""
  echo "        RDI_BASEROOT: \"$RDI_BASEROOT\""
  echo "         RDI_DATADIR: \"$RDI_DATADIR\""
  echo "          RDI_LIBDIR: \"$RDI_LIBDIR\""
  echo "          RDI_BINDIR: \"$RDI_BINDIR\""
  if [ -d "$RDI_JAVAROOT" ]; then
    echo "        RDI_JAVAROOT: \"$RDI_JAVAROOT\""
  fi
  echo "     LD_LIBRARY_PATH: \"$LD_LIBRARY_PATH\""
  echo "                PATH: \"$PATH\""
  if [ ! -z "$COVFILE" ]; then
    echo "             COVFILE: \"$COVFILE\""
  fi
fi

if [ "$RDI_CHECK_PROG" = True ]; then
  if [ ! -f "$RDI_PROG" ]; then
    echo "ERROR: Could not find 64-bit executable."
    echo "ERROR: $RDI_PROG does not exist"
    exit 1
  fi
fi

if [ "$RDI_INVOKE_PROD_VERSION" = 1 ]; then
  RDI_PRODVERSION_VERSION=`$PRODVERSION_EXE $RDI_PRODVERSION_PROG`
  echo "****** $RDI_PRODVERSION_VERSION"
fi

unset GNOME_DESKTOP_SESSION_ID

RDI_EXEC_COMMANDS "${RDI_ARGS[@]}"
